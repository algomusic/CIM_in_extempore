;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; LOADS
;;
;; command for precopmiling cimlib
;; first copy cimlib into "extempore/libs/contrib/cimlib.xtm"
;; then start extempore (without loading or running anything!)
;;
;; then eval this expr:
;;
;; (sys:precomp:compile-xtm-file "libs/contrib/cimlib.xtm" #t #t #t)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; dependencies
;(sys:load "libs/external/portmidi.xtm")
(sys:load "libs/external/midi_input.xtm")


;;;;;;;;;;;;;;;;;;;;; command line argument parsing ;;;;;;;;;;;;;;;;;;;;
(define cmd-arg-true
  (lambda (switch)
    (let ((value (sys:cmdarg switch)))
    (cond
     ((string? value)
      (cond
       ((or (string=? value "") (string=? value "0")
            (string=? value "false") (string=? value "FALSE") (string=? value "False")
            (string=? value "NO" "no")) #f)
       (else #t)))
     (else #f)))))

(define with-dsp? (cmd-arg-true "audio"))
(define with-sustain? (cmd-arg-true "sustain"))
(define with-midicc? (cmd-arg-true "midicc"))
(define with-osc? (cmd-arg-true "osc"))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; MIDI Setup ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;; Some helpful functions for using MIDI devices by name ;;;
(bind-func midi_input_port_id:[i32,i8*]*
  (lambda (port_name)
    (let* ((n:i32 (Pm_CountDevices))
           (loop:[i32,i32]*
            (lambda (i:i32)
              (cond
               ((and (<= (i64toi32 0) i) (< i n))
                (let* ((info:PmDeviceInfo* (Pm_GetDeviceInfo i))
                       (name:i8* (tref info 2))
                       (input:bool (= (i64toi32 1) (tref info 3)))
                       (a (strlen name)) (b (strlen port_name)) (c (if (< a b) a b)))
                  (cond
                   ((and input (= (i64toi32 0) (strncmp name port_name c))) i)
                   (else
                    (loop (+ i (i64toi32 1)))))))
               (else
                ;;(printf "No MIDI input port found with name %s\n" port_name)
                (atoi port_name)
                )))))
        (loop (i64toi32 0)))))


(bind-func midi_output_port_id:[i32,i8*]*
  (lambda (port_name)
    (let* ((n:i32 (Pm_CountDevices))
           (loop:[i32,i32]*
            (lambda (i:i32)
              (cond
               ((and (<= (i64toi32 0) i) (< i n))
                (let* ((info:PmDeviceInfo* (Pm_GetDeviceInfo i))
                       (name:i8* (tref info 2))
                       (output:bool (= (i64toi32 1) (tref info 4)))
                       (a (strlen name)) (b (strlen port_name)) (c (if (< a b) a b)))
                  (cond
                   ((and output (= (i64toi32 0) (strncmp name port_name c))) i)
                   (else
                    (loop (+ i (i64toi32 1)))))))
               (else
                ;;(printf "No MIDI output port found with name %s\n" port_name)
                (atoi port_name))))))
        (loop (i64toi32 0)))))


(bind-func print_midi_port_info:[void,i32]*
  (lambda (id)
    (let ((info:PmDeviceInfo* (Pm_GetDeviceInfo id)))
      (print info)
      void)))


(define midi-out-port-id
  (if (cmd-arg-true "midi-out")
      (let* ((value (sys:cmdarg "midi-out"))
             (id (midi_output_port_id value)))
        (if (<= 0 id) id (string->number value)))
      1))


(define midi-in-port-id
  (if (cmd-arg-true "midi-in")
      (let* ((value (sys:cmdarg "midi-in"))
             (id (midi_input_port_id value)))
        (if (<= 0 id) id (string->number value)))
      1))


(define (print-midi-setup)
  (print "MIDI out port is device number ")
  (print midi-out-port-id) (print " ")
  (print_midi_port_info midi-out-port-id)
  (println)
  (print "MIDI in  port is device number ")
  (print midi-in-port-id) (print " ")
  (print_midi_port_info midi-in-port-id)
  (println))

(print-midi-setup)


;; midi initialization first!
;; cimlib overloads certain midi input funcs
(if (<> 0 midi-in-port-id) (set_midi_in midi-in-port-id))
(define *midi-out* (pm_create_output_stream midi-out-port-id))
(bind-val midi_out PmStream*)
(bind-func midi_out_in_xtlang:[void,i8*]*
  (lambda (ptr:i8*)
    (set! midi_out (cast ptr PmStream*))
    void))
(midi_out_in_xtlang *midi-out*)
($ (println midi_out))

;;(sys:load "../CIM_in_extempore/cimlib.xtm")
;(sys:load "/Users/andrew/Documents/code/CIM_in_extempore/cimlib.xtm")
(sys:load "/Users/s978684/CIM_in_extempore/cimlib.xtm")
;(sys:load "/Users/s2805534/Documents/code/extempore/extempore-cim/CIM_in_extempore/cimlib.xtm")
(sys:load "libs/core/pc_ivl.xtm")
(if with-dsp? (sys:load "libs/external/instruments_ext.xtm"))

(println "Sustain playback is: " with-sustain?)
(println "Local audio playback is: " with-dsp?)
(println "CC playback?: " with-midicc?)

;;;;;;;;;;;;;;;;;;;;;;
;;
;; osc stuff
;;
;;;;;;;;;;;;;;;;;;;;;;

(define *osc:on* with-osc?)

(if *osc:on* (io:osc:start-server 9000 "osc-receive-9000"))

;; define a sending address
(define addy1 (cons "169.254.52.46" 9000))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; utilities
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; utilities
;;(define panic
;;  (lambda (stream)
;;    (pm_send stream *midi-cc* 0 64 0)
;;  	(dotimes (c 16)
;;  		(dotimes (i 127)
;;        (pm_send stream 128 c i 0)))))

(define panic
  (lambda ()
    (println "panic")
    ;(pm_send *midi-out* *midi-cc* 0 64 0)
    (dotimes (i 127)
      (pm_send *midi-out* 128 0 i 0))))

;;(panic)

;;(pm_send *midi-out* 144 0 61 100)
;;(pm_send *midi-out* 128 0 61 0)

;; sustain
(pm_send *midi-out* *midi-cc* 0 64 0)
(println *midi-cc*)

(define current-pcs
  (lambda ()
    (let ((pcs_cptr (current_pcs)))
      (map (lambda (i)
             (cptr:get-i64 pcs_cptr (* i 8)))
           (range 0 12)))))


;; where timea and timeb are limits for startime not endtime
;; where variance is a distance 'around' timea and timeb
(if with-dsp?
    (eval
     '(bind-func note_playback
       (lambda (time instrument startnote:CIMNote* endnote:CIMNote*)
         (println "playback -------")
         (println "from:" startnote)
         (println "to  :" endnote)
         (println)
         (if (or (null? startnote)
                 (null? endnote))
             void
             (let ((startidx (cim_note_index startnote))
                   (starttime (dtoi64 (* -1.0 CIMSRd (cim_note_onset startnote))))
                   (endidx (cim_note_index endnote))
                   (num (+ 1 (- endidx startidx)))
                   (note null)
                   (pitch 0)
                   (duration 0)
                   (i 0))
               (dotimes (i num)
                 (set! note (retrieve_note (+ i startidx)))
                 (xtm_play_note (+ time
                                   (dtoi64 (* CIMSRd (cim_note_onset note)))
                                   starttime)
                                instrument
                                (midi2frq (i64tof (cim_note_pitch note)))
                                (/ (exp (/ (i64tof (cim_note_volume note)) 26.222)) 127.0)
                                (dtoi64 (* CIMSRd (cim_note_duration note)))
                                0 null))
               void))))
     (interaction-environment)))

;; (bind-poly note_playback note_playback_a)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; cim array helpers


(define cim_f64->list
  (lambda (a)
    (let* ((size (cim_f64_size a))
          (lst (make-list-with-proc
                size
                (lambda (i)
                  (cim_f64_get a i)))))
      lst)))

(define list->cim_f64
  (lambda (l)
    (let* ((size (length l))
          (a (cim_f64_create size)))
      (for-each (lambda (x i)
                  (cim_f64_set a i (* 1.0 x)))
                l)
      a)))

(define cim_i64->list
  (lambda (a)
    (let* ((size (cim_i64_size a))
          (lst (make-list-with-proc
                size
                (lambda (i)
                  (cim_i64_get a i)))))
      lst)))

(define list->cim_i64
  (lambda (l)
    (let* ((size (length l))
          (a (cim_i64_create size)))
      (for-each (lambda (x i)
                  (cim_i64_set a i (real->integer x)))
                l)
      a)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; cim chunk helpers
;;

;; ;; start with a default db
;; (define *DB* (list (cim_db_create 100)))

;; ;; get the current db
;; (define db
;;   (lambda ()
;;     (car *DB*)))

;; ;; push a new db onto the stack
;; (define push-db
;;   (lambda ()
;;     (set! *DB* (cons (cim_db_create 100) *DB*))
;;     (car *DB*)))

;; ;; pop a db off the stack (probably don't need to do this)
;; (define pop-db
;;   (lambda ()
;;     (if (null? *DB*) *DB*
;;         (begin
;;           (set! *DB* (cdr *DB*))
;;           (if (null? *DB*) *DB*
;;               (car *DB*))))))

;; ;; return an old DB (i.e. any db by index)
;; (define old-db
;;   (lambda (idx)
;;     (if (< idx (length *DB*))
;;         (list-ref *DB* idx)
;;         #f)))

;; ;; updates the *current* db (i.e. (car *DB*))
;; (define update-db
;;   (lambda ()
;;     (cim_db_update_b (car *DB*))))


;; where returned list will be
(define chunk->scm
  (lambda (chunk)
    (let ((onsets (cim_f64->list (cim_chunk_onsets chunk)))
          (durations (cim_f64->list (cim_chunk_durations chunk)))
          (pitches (cim_i64->list (cim_chunk_pitches chunk)))
          (volumes (cim_i64->list (cim_chunk_volumes chunk))))
      (cim_f64_destroy onsets)
      (cim_f64_destroy durations)
      (cim_i64_destroy pitches)
      (cim_i64_destroy volumes)
      (list onsets pitches volumes durations))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(if with-dsp?
    (eval
     '(bind-func dsp:DSP 1000000
        (let ((t 0))
          (lambda (in time chan dat)
            (if (= t 0) (set! t time))
            (if (< chan 2)
                (+ (fmsynth in time chan dat)
                   0.0)
                0.0))))
     (interaction-environment)))

(if with-dsp?
    (begin
      (dsp:set! dsp)
      (fmsynth_fx.dfb .4)))

(define total-beat 0)

(define *bpm* 120)
(define *key* 0)
(define *density* 0)
(define *low* 127)
(define *high* 0)
(define *pcs* '())
(define *polyphony* 0)

(define *cim-phrase-overlap-factor* 1.5)
;(define *cim-current-repeat-period* 1)

(define set-tempo
  (lambda (bpm)
    (set_bpm bpm)
    (set! *bpm* bpm)
    (*metro* 'set-tempo bpm)))


;; pitch transformations
(define pitch-list '(60)) ;; start with dummy data

(define transform-pitches
  (lambda (lst chnkKey)
    (println 'transforming-pitches lst)
    (if (and (not (null? lst))
              (cl:find-if (lambda (x) (>= x 0)) lst))
      (let ((choice (random 0 4)))
        ;;(print lst 'transform: (now) choice '->)
        (case choice
          ((0) (set! pitch-list lst)) ;; no change
          ((1) (let ((p1 (car (cl:remove-if (lambda (x) (< x 0)) lst)))) ;; invert
                 (set! pitch-list (map (lambda (i) (if (>= i 0) (+ p1 (- p1 i)) i)) lst))))
          ((2) (set! pitch-list (map (lambda (i) (max 21 (min 120 (if (> i 48) (+ i (real->integer (* (randnd) 2))) i)))) lst))) ;; jitter
          ((3) (let* ((p1 (car (cl:remove-if (lambda (x) (< x 0)) lst))) ;; transpose and jitter a bit
                     (trans (random (cond ((> p1 84)
                                            '(-24 -12 0 -5))
                                          ((< p1 48)
                                            '(12 0 7))
                                          (else '(0 2 -2 7 -5 12 -12))))))
                  (set! pitch-list (map (lambda (i) (if (> i 40) (+ i trans (real->integer (* (randnd) 2))) i)) lst)))))
        ;; thin out lower pitches
        ;;(set! pitch-list (map (lambda (i) (if (< (random) (- 1 (/ i 55.0))) -1 i)) pitch-list))
        ;; thin out a bit
        ;;(set! pitch-list (map (lambda (i) (if (< (random) 0.1) -1 i)) pitch-list))
        ;; constrain to 88 note piano range
        (set! pitch-list (map (lambda (i)
                              (cond ((> i 120) (- i 24))
                                    ((> i 108) (- i 12))
                                    ((and (>= i 0) (< i 12)) (+ i 24))
                                    ((and (>= i 13) (< i 24)) (+ i 12))
                                    (else i))) pitch-list))
        ;(println pitch-list)
        ))))

;(set! pitch-list (map (lambda (i) (if (>= i 0) 60 i)) lst))))
;;(- 1 (/ 40 50.0))
;;(transform-pitches pitch-list)


(define get-pitches-from-chunk
  (lambda (chnk)
    (set! pitch-list
          (make-list-with-proc (cim_chunk_size chnk)
                               (lambda (i) (cim_chunk_note_pitch chnk i))))))

;; homophonic playnote
(define homo-play-midi-note
  (let ((notes (make-vector 127 0)))
    (lambda (time device pitch velocity duration channel)
      (if (and (> pitch 20) (< pitch 103)) ;; restrict to piano range (20 - 103)
          (begin
            (if (> time (now))
                (if (and (> time (vector-ref notes pitch))
                         (> duration 500.0))
                    (let ((dur (if (> duration (* 2. *second*)) (* 2. *second*) duration)))
                      ;;(record_midi_msg (real->integer time) *midi-note-on* 13 (real->integer pitch) (real->integer velocity))
                      ;;(record_midi_msg (real->integer (+ time dur)) *midi-note-off* 13 (real->integer pitch) (real->integer velocity))
                      ;; (println 'dur: dur 'pitch: pitch)
                      (callback time 'pm_send device *midi-note-on* channel pitch velocity)
                      (callback (+ time dur) 'pm_send device *midi-note-off* channel pitch 0)
                      (callback (+ time dur) 'pm_send device *midi-note-off* channel pitch 0)
                      (callback (+ time dur) 'pm_send device *midi-note-off* channel pitch 0))))
            (vector-set! notes pitch (+ time duration)))))))


;; simple playnote
(define simple-play-note
  (lambda (time device pitch velocity dur channel)
    (callback time 'pm_send device *midi-note-on* channel pitch velocity)
    (callback (+ time dur) 'pm_send device *midi-note-off* channel pitch 0)))

(simple-play-note (now) *midi-out* 60 100 44100 0)


;; playback
;; util - put in rtmidi-scm.xtm and push to git
(define-macro (hplay . args)
  (if (symbol? (car args))
      `(homo-play-midi-note (*metro* beat) ,(car args)
           (real->integer ,(cadr args))
           (real->integer ,(caddr args))
           (*metro* 'dur ,(car (cdddr args))) 0)
      `(homo-play-midi-note (*metro* (+ beat ,(car args))) ,(cadr args)
           (real->integer ,(caddr args))
           (real->integer ,(car (cdddr args)))
           (*metro* 'dur ,(cadr (cdddr args))) 0)))

(define play-midi-cc
  (lambda (time stream cc val channel)
    (record_midi_msg (real->integer time) *midi-cc* 13 (real->integer cc) (real->integer val))
    (callback (real->integer time) 'pm_send stream *midi-cc* (real->integer channel) (real->integer cc) (real->integer val))))

(bind-func print_chunk_notes
  (lambda (index:i64 size:i64)
    (doloop (i size)
      (println (retrieve_note (+ i index))))))

;; bugs full gas stops playback (i.e p3 > 120)
;; latest phrase never available for playback.

;; (bind-func find_random_chunk_call
;;   (lambda (a b c d e f)
;;     (find_random_chunk a b c d e f)))

;; (bind-func total_chunks
;;   (lambda (gap startidx endix)
;;     (num_chunks gap startidx endix)))

(define CIM-density (vector 0 0 0 0 0 0 0 0 0))

(define inc-CIM-density
  (lambda ()
    (vector-set! CIM-density (- (vector-length CIM-density) 1)
      (+ (vector-ref CIM-density (- (vector-length CIM-density) 1)) 1))))

(define get-CIM-density
  (lambda()
    (let ((sum 0))
      (dotimes (i (vector-length CIM-density))
          (set! sum (+ sum (vector-ref CIM-density i))))
      sum)))

(define beat-update-CIM-density
  (lambda()
    ;(println "Updating CIM density")
    (dotimes (i (- (vector-length CIM-density) 1))
      (vector-set! CIM-density i (vector-ref CIM-density (+ i 1))))
    (vector-set! CIM-density (- (vector-length CIM-density) 1) 0)))

;(beat-update-CIM-density)

(define select-chunk
  (lambda (desired-length forbidden-range-min forbidden-range-max)
    (let* ((chunk (new_find_chunk desired-length forbidden-range-min forbidden-range-max 0)))
      (if (not (null? chunk))
          (let ((actual-length (cim_chunk_duration chunk))
                (num-notes (cim_chunk_size chunk)))
            (if (= num-notes 0) (cim_chunk_invalidate chunk))))
      chunk)))


(define play-chunk
  (lambda (chunk beat inst)
    (let* ((chunkkey (cim_chunk_key chunk))
           (cmaj? (if (= 1 (cim_key_major chunkkey)) #t #f))
           (ckey (cim_key_root chunkkey))
           (size (cim_chunk_size chunk))
           (idx (cim_chunk_start_index chunk))
           (last-onset 0.0)
           (maj? (if (< *key* 0) #f #t))
           (key (if maj? *key* (modulo (* *key* -1) 12)))
           ;;(scale (pc:scale key (if maj? 'ionian 'aeolian)))
           (scale (cim_pcs->list (get_pitch_class_set)))
           ;;(scale pitch-list)
           (note-not-played? #t))
      (if *osc:on*
          (begin
            (io:osc:send (*metro* beat) addy1 "/CIMdisplay/segs" (number->string num))
            (io:osc:send (*metro* beat) addy1 "/CIMdisplay/tempoPBS" 1)
            (io:osc:send (+ 5000 (*metro* beat)) addy1 "/CIMdisplay/tempoPBS" 0)))
      (transform-pitches (get-pitches-from-chunk chunk) chunkkey)
      (let ((offset (cim_chunk_start_beatclass chunk)))
        (println 'Offset offset)
        (if (= (cim_chunk_valid chunk) 1)
            (dotimes (i size)
              (if note-not-played? (set! last-onset (* -1 (cim_chunk_note_onset chunk i))))
              (set! note-not-played? #f)
              (let* ((os (cim_chunk_note_onset chunk i))
                     (mm (modulo os 0.125))
                     (mm2
                      (if (< mm .05)
                          mm
                          (if (> mm .1)
                              (- mm .125)
                              0.0))))
                ;; CIM density count
                (inc-CIM-density)
                ;;(hplay (+ 0.0 last-onset (if (< os .11) os (- os mm2))) ;; quantise
                (hplay (+ offset last-onset os)  inst ;; no quantise
                       (pc:quantize (real->integer (+ (- key ckey) (list-ref pitch-list i))) scale)
                       (clamp (+ (random -10 10) (/ (+ (current_avg_velocity) (cim_chunk_note_volume chunk i)) 2)) 10 127)
                       (cim_chunk_note_duration chunk i))
                )))))))
                    


(define update-metro
  (lambda (bpm time beats)
    (set! *metro* (make-metro bpm (cons time beats)))))

(bind-func console_print
  (lambda (str:i8*)
    (ascii_text_color 1 0 3)
    (printf "%s \r" str)
    void))

(define lasttime 0)
(define lastbpm 120)

(define beat-loop
  (let ((cnt 0) (allowreset #t))
    (lambda (beat dur)
      (set! *key* (current_key))
      (set! *pcs* (current-pcs))
      (set! *low* (current_pitch_range_low))
      (set! *high* (current_pitch_range_high))
      ;(set! *density* (current_density))
      (set! *polyphony* (current_polyphony_cnt))
      (set! *bpm* (current_bpm))
      (if *osc:on*
          (begin
            (io:osc:send (*metro* beat) addy1 "/CIMdisplay/tempoLED" 1)
            (io:osc:send (+ 5000 (*metro* beat)) addy1 "/CIMdisplay/tempoLED" 0)
            (io:osc:send (now) addy1 "/CIMdisplay/bpm" (number->string *bpm*))
            (io:osc:send (now) addy1 "/CIMdisplay/keyRoot" (list-ref (list "C" "C#" "D" "Eb" "E" "F" "F#" "G" "Ab" "A" "Bb" "B" "C") (abs *key*)))
            (io:osc:send (now) addy1 "/CIMdisplay/keyQuality" (if (< *key* 0) "Minor" "Major"))))
      (if (or (<> lasttime (get_phase_time))
              (<> lastbpm *bpm*))
          (begin
            (set! lasttime (get_phase_time))
            ;;(play-note (now) fmsynth 96 90 3000)
            (println "CHANGE METRO!" lasttime (*metro* beat) (now))
            ;; (callback (+ lasttime (* 2. *samplerate* (/ 60.0 *bpm*)))
            ;;           'update-metro (current_bpm)
            ;;           (+ lasttime (* 2. *samplerate* (/ 60.0 *bpm*)))
            ;;           (+ total-beat 1))))
            (callback (+ (*metro* beat) (* *samplerate* (/ 60.0 *bpm*)))
                      'update-metro (current_bpm)
                      (+ (*metro* beat) (* *samplerate* (/ 60.0 *bpm*)))
                      (+ total-beat 1))))
      (set! lastbpm *bpm*)
      (set! cnt (+ cnt 1))
      (set! total-beat beat)
      ;(let* ((maj? (if (< *key* 0) #f #t))
      ;       (key (if maj? *key* (modulo (* *key* -1) 12))))
        (if (and (> (cim_get_pedal 4) 0) allowreset)
            (begin
              (println "reset pedal")
              (set! allowreset #f)))
              ;(reset_buffers)))
        (if (= 0 (cim_get_pedal 4))
            (begin
              (set! allowreset #t)))
        (if (> (cim_get_pedal 5) 0)
            (begin
              (if *osc:on*
                  (begin
                    (io:osc:send (now) addy1 "/CIMdisplay/panicLED" 1)
                    (io:osc:send (+ (now) 10000) addy1 "/CIMdisplay/panicLED" 0)))
              (println "panic pedal")
              (panic *midi-out*)))
        ;; metronome
        ;; (if with-dsp?
        ;;     (begin
        ;;       (playob 0 1 fmsynth (+ key 72) 70 (* .4 dur) 1.0 0.5)
        ;;       (playob 0 1 fmsynth (+ key 84) 50 (* .1 dur) 1.0 0.5)))
        ;; (hplay (- 0 0.1) *midi-out* 96 40 0.1)
        ;; (if (= (modulo beat 4) 0)
        ;;     (simple-play-note (*metro* beat) *midi-out* 36 100 0.1 9)
        ;;     (simple-play-note (*metro* beat) *midi-out* 38 80 0.1 9))
        (if (= 0 (modulo beat (get-repeat-period)))
            (let ((chunk
                   (select-chunk
                    (* *cim-phrase-overlap-factor* (get-repeat-period))
                    (get-forbidden-range-min)
                    (get-forbidden-range-max))))
              ;;(println "Forbidden range is " (get-forbidden-range-min) " to " (get-forbidden-range-max))
              (set-forbidden-range-min 0)
              (set-forbidden-range-max 0)
              (if (= (cim_chunk_valid chunk) 1)
                  (play-chunk chunk beat *midi-out*))))
        (beat-update-CIM-density)
        (callback (*metro* (+ beat (* 0.95 dur))) 'beat-loop (+ beat dur) dur))))



;; start main playback loop
(beat-loop (*metro* 'get-beat 1) 1)

(define display-feedback
  (lambda ()
    (if *osc:on*
        (let ((density_controller (real->integer (/ (cim_get_pedal 3) 25.0)))) ;; depricated
          (if (> (cim_get_pedal 1) 30)
              (io:osc:send (now) addy1 "/CIMdisplay/analyseLED" 1)
              (io:osc:send (now) addy1 "/CIMdisplay/analyseLED" 0))
          (if (> (cim_get_pedal 2) 30)
              (io:osc:send (now) addy1 "/CIMdisplay/recordLED" 1)
              (io:osc:send (now) addy1 "/CIMdisplay/recordLED" 0))
          (if (> (cim_get_pedal 3) 0)
              (io:osc:send (now) addy1 "/CIMdisplay/pbInt" (cim_get_pedal 3))
                           ;;(list-ref '(16 8 4 3 2 1) density_controller))
              (io:osc:send (now) addy1 "/CIMdisplay/pbInt" 0))))
    (callback (+ (now) 4000) 'display-feedback)))

;(display-feedback)

(cim_bpm_confidence_weight 2)

;; (cim_print_midi_messages 0)

(define reset_buffers
  (lambda ()
    (set! pitch-list '())
    (note_buffer_reset)
    (if *osc:on*
        (begin
          (let ((num (total_chunks 2.5 0 0)))
            (io:osc:send (now) addy1 "/CIMdisplay/segs" (number->string num))
            (io:osc:send (now) addy1 "/CIMdisplay/flushLED" 1)
            (io:osc:send (+ (now) 25000) addy1 "/CIMdisplay/flushLED" 0))))
    (println "RESET BUFFERS")))

(reset_buffers)

;(bind-func reset-buf
;  (lambda ()
;    (note_buffer_reset)
;    (println "resetting")
;    void))

;; density controller inital setting (half way)
(cim_set_pedal 3 4)

;; vary playback frequency based on perfromer density
;; (cim_get_pedal 3 chunk play interval in beats
;;(define CIM-playback-frequency 0)


(define density-loop
  (lambda (beat dur)
    (let ((den (current_density))
          (cimDen (get-CIM-density)))
      (if (< den 0.5)
          (if (< (random) 0.1)
              (set-repeat-period (max 1 (- (get-repeat-period) 1)))
              (set-repeat-period (min 16 (max 1 (+ (get-repeat-period) (random -2 3))))))
          (if (< (random) 0.25)
              (set-repeat-period (min 16 (+ (get-repeat-period) 1)))
              (set-repeat-period (max 1 (min 16 (+ (get-repeat-period) (random -2 3)))))))
          (println 'density 'CIM (get-CIM-density) 'Hum den 'rate (get-repeat-period))
          (callback (*metro* (+ beat (* 0.95 dur))) 'density-loop (+ beat dur) dur))))
          

(set-repeat-period 1)



;; (define density-loop
;;   (lambda (beat dur)
;;     (let ((den (current_density))
;;           (cimDen (get-CIM-density)))
;;       (cond  ((>= den 0)
;;               (if (and (= den 0) (< (random) 0.2))  ;; human player is silent
;;                 (set! *cim-current-repeat-period* 4/1) ;;;
;;                 (set! *cim-current-repeat-period* 2/1))
;;               (cond
;;                ((and (> cimDen 0) (< cimDen 20))
;;                 (set! CIM-playback-frequency (max 1 (- CIM-playback-frequency 1))))
;;                     ((and (> cimDen 30) (< cimDen 50))
;;                       (set! CIM-playback-frequency (min 16 (+ CIM-playback-frequency 1))))
;;                     ((> cimDen 50) (set! CIM-playback-frequency 0)))))
;;       (cim_set_pedal 3 CIM-playback-frequency)
;;       (println 'density 'CIM (get-CIM-density) 'Hum den 'rate (cim_get_pedal 3)))
;;     (callback (*metro* (+ beat (* 0.95 dur))) 'density-loop (+ beat dur) dur)))

;(random '(120 120 100 100 80 70 40 20)))))

(density-loop (*metro* 'get-beat 1) 8)

;; sustain pedal and panic pedal loop
;; (define prev-sus 0)

;; (define sus-loop
;;   (lambda ()
;;     (let ((val (get_sus_pos)))
;;       (cond ((<> val prev-sus)
;;             (pm_send *midi-out* *midi-cc* 0 64 val) ;; check pedal polarity (- 127 val)
;;             (set! prev-sus val))))
;;       ;(println (get_panic_pos))
;;       (if (= (get_panic_pos) 127) (panic))
;;     (callback (+ (now) 10000) 'sus-loop)))

;; ;; start it
;; (sus-loop)

;; recording (always on)
(cim_set_pedal 2 127)

;; analysis (always off)
(cim_set_pedal 1 0)

;; setup a single initial section (zero indexed as always)
;; index 0, 120.0 bpm, 0 (C), #t Major
($ (set_cim_section 0 120.0 0 #t))

;; start sections off with initial call
(next_cim_section)

(set-phrase-inertia-spread 0.5)

(setCIMDefaultGapSize 1.0)

(set-tempo 120)


;; flush memory
(reset_buffers)

