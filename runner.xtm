;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; init midi stuff
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define midi-out-port 
  (if (string=? "" (sys:cmdarg "midi-out"))
      0
      (string->number (sys:cmdarg "midi-out"))))

(define midi-in-port 
  (if (string=? "" (sys:cmdarg "midi-in"))
      0
      (string->number (sys:cmdarg "midi-in"))))

(println "MIDI out port is" midi-out-port "MIDI in port is" midi-in-port)

(sys:load "../CIM_in_extempore/cimlib.xtm")
(sys:load "libs/core/pc_ivl.xtm")
;; init MIDI stuff

(define *midi-in* (midi_new_indevice))
(define *midi-out* (midi_new_outdevice))

;; query for valid midi output devices
(midi_query_outports *midi-out*)
(midi_open_outport *midi-out* midi-out-port)
;; query for valid midi input
(midi_query_inports *midi-in*)
(midi_open_inport *midi-in* midi-in-port)

;; register a *midi-in* to "midi_callback"
(midi_register_device *midi-in* "midi_msg_buffer_receiver")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(sys:load "libs/external/instruments_ext.xtm")

(bind-func dsp:DSP 1000000
  (let ((t 0))
    (lambda (in time chan dat)
      (if (= t 0) (set! t time))
      (if (< chan 2)
          (+ (fmsynth in time chan dat)
             0.0)
          0.0))))

(dsp:set! dsp)

;;(fmsynth_fx.dfb .01)
(fmsynth_fx.dfb .4)

(define total-beat 0)

(define *key* 0)
(define *density* 0)
(define *low* 127)
(define *high* 0)
(define *pcs* '())
(define *polyphony* 0)

;; pitch transformations
(define pitch-list ())

(define transform-pitches
  (lambda (lst)
    (set! pitch-list (map (lambda (i) (if (>= i 0) (+ i (random -4 4))) i) lst))))

;(transform-pitches)

(define get-pitches-from-chunk
  (lambda (chnk)
    (set! pitch-list (make-list-with-proc (cim_chunk_size chnk) 
      (lambda (i) (cim_chunk_note_pitch chnk i))))))

;; playback
;; util - put in rtmidi-scm.xtm and push to git
(define-macro (hplay . args)
  (if (symbol? (car args))
      `(homo-play-midi-note (*metro* beat) ,(car args)
           (real->integer ,(cadr args))
           (real->integer ,(caddr args))
           (*metro* 'dur ,(car (cdddr args))) 0)
      `(homo-play-midi-note (*metro* (+ beat ,(car args))) ,(cadr args)
           (real->integer ,(caddr args))
           (real->integer ,(car (cdddr args)))
           (*metro* 'dur ,(cadr (cdddr args))) 0)))

(define play-midi-cc
  (lambda (time device cc val channel)
    (callback (real->integer time) 'midi_send device *midi-cc* (real->integer channel) (real->integer cc) (real->integer val))))

(bind-func print_chunk_notes
  (lambda (index:i64 size:i64)
    (doloop (i size)
      (println (retrieve_note (+ i index))))))

(define play-chunk
  (lambda (beat inst gap)
    ;(println 'play-chunk)
    ;; gap homophonic start end d1 d2
    ;; so defaults to accept everything in find_random (with 1.5s gap)
    ;; (find_random_chunk_a 1.5 0.0 0 0 0.0 10000.0)
    (let* ((chunk (find_random_chunk_a gap 0.0 0 0 0.0 1000.0))
           (size (cim_chunk_size chunk))
           (idx (cim_chunk_start_index chunk))
           (last-onset 0.0)
           (maj? (if (< *key* 0) #f #t))
           (key (if maj? *key* (modulo (* *key* -1) 12)))
           (scale (pc:scale key (if maj? 'ionian 'aeolian)))
           (note-not-played? #t))
      ;(CIMChunk_print chunk)
      (println)
      (println 'key: key)
      (println '---------------)
      (println key maj? scale)
      ;(print_chunk_notes idx size)
      (transform-pitches (get-pitches-from-chunk chunk))
      ;(println 'pitch-list pitch-list)
      (if (= (cim_chunk_valid chunk) 1)
          (dotimes (i size)
            (if (and (< (real->integer (list-ref pitch-list i)) 0) note-not-played?)
              (begin 
                (play-midi-cc (now) *midi-out* (* -1 (list-ref pitch-list i)) (cim_chunk_note_volume chunk i) 0))
              (if (>= (real->integer (list-ref pitch-list i)) 0) ;; manage contoller data (negative data a values)
                (begin 
                  (if note-not-played? (set! last-onset (* -1 (cim_chunk_note_onset chunk i))))
                  (set! note-not-played? #f)
                  ;(println (cim_chunk_note_onset chunk i))
                  (hplay (+ last-onset (cim_chunk_note_onset chunk i))
                  inst
                  ;(pc:quantize (cim_chunk_note_pitch chunk i) scale)
                  (pc:quantize (real->integer (list-ref pitch-list i)) scale)
                  (min 127 (max 0 (+ (cim_chunk_note_volume chunk i) (random -15 15))))
                  (cim_chunk_note_beats chunk i)))
                (begin 
                  (play-midi-cc (*metro* (+ (cim_chunk_note_onset chunk i) beat last-onset)) 
                  *midi-out* (* -1 (list-ref pitch-list i)) (cim_chunk_note_volume chunk i) 0)))))))))


(define test
  (let ((cnt 0))
    (lambda (beat dur)
      ;; (println "pcs: " *pcs*
      ;;          " low: " *low*
      ;;          " high: " *high*
      ;;          "density:" *density*)
      (set! cnt (+ cnt 1))
      (set! total-beat beat)
      (let* ((maj? (if (< *key* 0) #f #t))
             (key (if maj? *key* (modulo (* *key* -1) 12))))
      ;; metronome 
        ;(playob 0 1 fmsynth (+ key 72) 70 (* .4 dur) 1.0 0.5)
        ;(playob 0 1 fmsynth (+ key 84) 50 (* .1 dur) 1.0 0.5)
        (hplay *midi-out* 96 100 0.1)
        ;(play fmsynth 96 100 0.1)
        (if (= 0 (modulo beat 8)) 
            (play-chunk beat *midi-out* 1.5))
        (callback (*metro* (+ beat (* .5 dur))) 'test (+ beat dur) dur)))))

(test (*metro* 'get-beat 4) 1)

(define update-metro
  (lambda (bpm time beats)
    (set! *metro* (make-metro bpm (cons time beats)))))

(define analysis-loop
  (let ((lasttime 0))
    (lambda (beat dur)
      (set! *key* (current_key))
      (set! *pcs* (current-pcs))
      (set! *low* (current_pitch_range_low))
      (set! *high* (current_pitch_range_high))
      (set! *density* (current_density))
      (set! *polyphony* (current_polyphony_cnt))
      (current_bpm)
      (if (<> lasttime (get_phase_time))
          (begin
            (set! lasttime (get_phase_time))
            ;(play-note (now) fmsynth 96 90 3000)
            (println "change time!" lasttime)
            (callback (+ lasttime (* *samplerate* (/ 60.0 (current_bpm))))
                      'update-metro (current_bpm)
                      (+ lasttime (* *samplerate* (/ 60.0 (current_bpm))))
                      (+ total-beat 1))))
      (callback (*metro* (+ beat (* 0.95 dur))) 'analysis-loop (+ beat dur) dur))))

(analysis-loop (*metro* 'get-beat 4) 1)

(define reset_buffers
  (lambda ()
    (note_buffer_reset)
    (midi_msg_buffer_reset)))

(reset_buffers)

(panic *midi-out*)
