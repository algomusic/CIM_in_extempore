;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; CIM - Controlling Interactive Music
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; load rtmidi
(sys:load "libs/external/rtmidi.xtm")
(sys:load "libs/core/math.xtm")
(sys:load "libs/core/audio_dsp.xtm")
(sys:load "libs/core/instruments.xtm")

;; (bind-val SRd double (integer->real *au:samplerate*))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; NOTE Buffer
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; index (0)
;; seconds-onset (1), seconds-duration (2),
;; pitch (3), volume (4), beats (5)
(bind-type CIMNote <i64,double,double,i64,i64,Rational>)
(bind-val CIMNoteBuffer |1000000,CIMNote|)
(bind-val CIMNoteBufferIdx i64 0)
(bind-val CIMNoteDurResolver |127,i64|)
(bind-val CIMNoteBufferStartTime i64 0)

(bind-func cim_save_note_buffer
  (lambda (filename)
    (let ((fp (fopen filename "w"))
          (idx:i64* (salloc 1)))
      (pset! idx 0 CIMNoteBufferIdx)
      (if (null? fp)
          (begin (println "Failed to open file" (Str filename))
                 -1)
          (let ((data (cast CIMNoteBuffer i8*))
                (pos1 (ptrtoi64 (cast (aref-ptr CIMNoteBuffer 0))))
                (pos2 (ptrtoi64 (cast (aref-ptr CIMNoteBuffer 1))))
                (size (- pos2 pos1)))
            (if (< (fwrite (cast idx i8*) 8 1 fp) 0)
                (begin
                  (fclose fp)
                  (println "Failed to write to " (Str filename))
                  -1)
                (if (< (fwrite data size CIMNoteBufferIdx fp) 0)
                    (begin
                      (fclose fp)
                      (println "Failed to write to " (Str filename))
                      -1)
                    (begin
                      (fclose fp)
                      1))))))))

(bind-func cim_load_note_buffer
  (lambda (filename)
    (let ((fp (fopen filename "r"))
          (idx:i64* (salloc 1)))
      (if (null? fp)
          (begin (println "Failed to open file" (Str filename))
                 -1)
          (let ((data (cast CIMNoteBuffer i8*))
                (pos1 (ptrtoi64 (cast (aref-ptr CIMNoteBuffer 0))))
                (pos2 (ptrtoi64 (cast (aref-ptr CIMNoteBuffer 1))))
                (size (- pos2 pos1)))
            (if (= (fread (cast idx) 8 1 fp) 8)
                (begin
                  (fclose fp)
                  (println "Failed to load from " (Str filename))
                  -1)
                (if (= (fread data size (pref idx 0) fp) (* size (pref idx 0)))
                    (begin
                      (fclose fp)
                      (println "Failed to load from " (Str filename))
                      -1)
                    (begin
                      (set! CIMNoteBufferIdx (pref idx 0))
                      (fclose fp)
                      1))))))))

(bind-func init_dur_resolver
  (lambda ()
    (doloop (i 127)
      (aset! CIMNoteDurResolver i -1))
    void))

(init_dur_resolver)

(bind-func cim_note_index
  (lambda (note:CIMNote*)
    (if (null? note) -1
        (tref note 0))))

(bind-func cim_note_onset
  (lambda (note:CIMNote*)
    (if (null? note) -1.0
        (tref note 1))))

(bind-func cim_note_duration
  (lambda (note:CIMNote*)
    (tref note 2)))

(bind-func cim_note_set_duration
  (lambda (note:CIMNote* duration)
    (tset! note 2 duration)))

(bind-func cim_note_pitch
  (lambda (note:CIMNote*)
    (tref note 3)))

(bind-func cim_note_volume
  (lambda (note:CIMNote*)
    (tref note 4)))

(bind-func cim_note_beats
  (lambda (note:CIMNote*)
    (tref note 5)))

(bind-func CIMNote_print:[void,CIMNote*]*
  (lambda (note)
    (if (null? note)
        (printout "<NOTE: NULL>")
        (printout "<NOTE: " (cim_note_index note)
                  " onset: " (cim_note_onset note)
                  " dur: " (cim_note_duration note)
                  " pitch: " (cim_note_pitch note)
                  " vol: " (cim_note_volume note)
                  " beats: " (cim_note_beats note)
                  ">"))
    void))

(bind-poly print CIMNote_print)

(bind-func retrieve_note
  (lambda (idx)
    (if (or (< idx 0)
            (>= idx CIMNoteBufferIdx))
        null
        (aref-ptr CIMNoteBuffer idx))))

(bind-func last_note
  (lambda ()
    (if (= 0 CIMNoteBufferIdx) null
        (aref-ptr CIMNoteBuffer (- CIMNoteBufferIdx 1)))))

(bind-func note_buffer_reset
  (lambda ()
    (set! CIMNoteBufferIdx 0)))

(bind-func dump_note_buffer
  (lambda ()
    (doloop (i CIMNoteBufferIdx)
      (println (retrieve_note i)))))


(bind-func find_note_a
  (lambda (timea timeb)
    (let ((idx 0)
          (note (retrieve_note idx)))
      (while (and (not (null? note))
                  (or (< (cim_note_onset note) timea)
                      (> (cim_note_onset note) timeb)))
        (set! idx (+ idx 1))
        (set! note (retrieve_note idx)))
      note)))

(bind-func find_note_b
  (lambda (timea)
    (find_note_a timea timea)))

(bind-func find_note_c
  (lambda (timea pitch)
    (let ((idx 0)
          (note (retrieve_note idx)))
      (while (and (not (null? note))
                  (or (< (cim_note_onset note) timea)
                      (<> (cim_note_pitch note) pitch)))
        (set! idx (+ idx 1))
        (set! note (retrieve_note idx)))
      note)))

(bind-poly find_note find_note_a)
(bind-poly find_note find_note_b)
(bind-poly find_note find_note_c)

(bind-type CIMChunk <i1,CIMNote*,CIMNote*>)

(bind-func cim_chunk_valid
  (lambda (chunk:CIMChunk*)
    (tref chunk 0)))

(bind-func cim_chunk_start
  (lambda (chunk:CIMChunk*)
    (tref chunk 1)))

(bind-func cim_chunk_end
  (lambda (chunk:CIMChunk*)
    (tref chunk 2)))


(bind-func CIMChunk_print:[void,CIMChunk*]*
  (lambda (chunk)
    (if (null? chunk)
        (printout "<CHUNK: NULL>")
        (begin
          (printout "<CHUNK: valid: " (cim_chunk_valid chunk) " onset: " (cim_note_onset (cim_chunk_start chunk)))
          (printout "\nstart: " (cim_chunk_start chunk))
          (printout "\nend  : " (cim_chunk_end chunk) ">")))
    void))

(bind-poly print CIMChunk_print)

(bind-func find_chunk_a
  (let ((chunk:CIMChunk* (alloc)))
    (lambda (chunk_num:i64 gapsize)
      (tset! chunk 0 #f)
      (let ((idx 0)
            (gap 0.0)
            (startnote (retrieve_note idx))
            (ptime 0.0)
            (finished #f)
            (note (retrieve_note idx)))
        (while (and (not (null? note)) (not finished))
          (if (> (- (cim_note_onset note) ptime) gapsize)
              (begin
                (set! chunk_num (- chunk_num 1))
                (if (= chunk_num 0)
                    (begin (set! finished #t)
                           (set! idx (- idx 1))
                           void)
                    (begin (set! idx (+ idx 0))
                           (set! startnote note)
                           void)))
              (begin (set! idx (+ idx 1)) void))
          (set! ptime (+ (cim_note_onset note) (cim_note_duration note)))
          (set! note (retrieve_note idx)))
        (if (and (null? note)
                 (= chunk_num 1))
            (begin
              (set! finished #t)
              (set! note (last_note))))
        (tfill! chunk finished startnote note)
        chunk))))

(bind-func find_chunk_b
  (lambda (chunk_num)
    (find_chunk_a chunk_num 3.0)))

(bind-poly find_chunk find_chunk_a)
(bind-poly find_chunk find_chunk_b)

(bind-func dump_chunks_a
  (lambda (gap)
    (let ((idx 1)
          (chunk (find_chunk idx gap)))
      (while (cim_chunk_valid chunk)
        (println "-----------" idx "------------")
        (println chunk)
        (set! idx (+ idx 1))
        (set! chunk (find_chunk idx gap)))
      (println)
      void)))

(bind-func dump_chunks_b
  (lambda ()
    (dump_chunks_a 3.0)))

(bind-poly dump_chunks dump_chunks_a)
(bind-poly dump_chunks dump_chunks_b)


(bind-func record_note
  (lambda (time type chan:i8 a b)
    (if (= type MIDI_CC) -1
        (let ((note (retrieve_note (aref CIMNoteDurResolver (i8toi64 a)))))
          (if (not (null? note))
              (begin
                (cim_note_set_duration note
                                       (- (/ (i64tod (- time CIMNoteBufferStartTime)) (ftod SRf))
                                          (cim_note_onset note)))
                (aset! CIMNoteDurResolver (i8toi64 a) -1)))
          (if (= type MIDI_NOTE_ON)
              (begin
                (if (= CIMNoteBufferIdx 0) (set! CIMNoteBufferStartTime time))
                (let ((note:CIMNote* (aref-ptr CIMNoteBuffer CIMNoteBufferIdx)))
                  (tfill! note CIMNoteBufferIdx
                          (/ (i64tod (- time CIMNoteBufferStartTime)) (ftod SRf))
                          0.0 (i8toi64 a) (i8toi64 b) 1/1)
                  (aset! CIMNoteDurResolver (i8toi64 a) CIMNoteBufferIdx)
                  (set! CIMNoteBufferIdx (+ CIMNoteBufferIdx 1))
                  (- CIMNoteBufferIdx 1)))
              -1)))))


(bind-func midi_send_dat
  (lambda (device:i8* a:i8 b:i8 c:i8 d:i8)
    (midi_send (cast device) a b c d)))


;; where timea and timeb are limits for startime not endtime
;; where variance is a distance 'around' timea and timeb
(bind-func note_midi_playback_a
  (lambda (time device:i8* channel startnote:CIMNote* endnote:CIMNote*)
    (println "playback -------")
    (println "from:" startnote)
    (println "to  :" endnote)
    (println)
    (if (or (null? startnote)
            (null? endnote))
        void
        (let ((startidx (cim_note_index startnote))
              (starttime (dtoi64 (* -1.0 SRd (cim_note_onset startnote))))
              (endidx (cim_note_index endnote))
              (num (+ 1 (- endidx startidx)))
              (note null)
              (pitch 0)
              (duration 0)
              (i 0))
          (dotimes (i num)              
            (set! note (retrieve_note (+ i startidx)))
            (begin
              (callback (+ time
                           (dtoi64 (* SRd (cim_note_onset note)))
                           starttime)
                        midi_send_dat
                        device
                        MIDI_NOTE_ON channel
                        (i64toi8 (cim_note_pitch note))
                        (i64toi8 (cim_note_volume note)))
              (callback (+ (dtoi64 (* SRd (cim_note_onset note)))
                           (dtoi64 (* SRd (cim_note_duration note)))
                           time starttime)
                        midi_send_dat
                        device
                        MIDI_NOTE_OFF channel
                        (i64toi8 (cim_note_pitch note))
                        (i64toi8 0))))
          void))))

(bind-func note_midi_playback_b
  (lambda (time device:i8* channel chunknum gap)
    (let ((chunk (find_chunk chunknum gap)))
      (note_midi_playback_a time device channel
                            (cim_chunk_start chunk)
                            (cim_chunk_end chunk)))))

(bind-func note_midi_playback_c
  (lambda (time device:i8* channel chunknum)
    (let ((chunk (find_chunk chunknum 2.0)))
      (note_midi_playback_a time device channel
                            (cim_chunk_start chunk)
                            (cim_chunk_end chunk)))))

(bind-func note_midi_playback_d
  (lambda (time device:i8* channel)
    (note_midi_playback_a time device channel
                          (retrieve_note 0)
                          (last_note))))

(bind-poly note_midi_playback note_midi_playback_a)
(bind-poly note_midi_playback note_midi_playback_b)
(bind-poly note_midi_playback note_midi_playback_c)
(bind-poly note_midi_playback note_midi_playback_d)

;; where timea and timeb are limits for startime not endtime
;; where variance is a distance 'around' timea and timeb
(bind-func note_playback_a
  (lambda (time instrument startnote:CIMNote* endnote:CIMNote*)
    (println "playback -------")
    (println "from:" startnote)
    (println "to  :" endnote)
    (println)
    (if (or (null? startnote)
            (null? endnote))
        void
        (let ((startidx (cim_note_index startnote))
              (starttime (dtoi64 (* -1.0 SRd (cim_note_onset startnote))))
              (endidx (cim_note_index endnote))
              (num (+ 1 (- endidx startidx)))
              (note null)
              (pitch 0)
              (duration 0)
              (i 0))
          (dotimes (i num)              
            (set! note (retrieve_note (+ i startidx)))
            (xtm_play_note (+ time
                              (dtoi64 (* SRd (cim_note_onset note)))
                              starttime)
                           instrument                             
                           (midi2frq (i64tof (cim_note_pitch note)))
                           (/ (exp (/ (i64tof (cim_note_volume note)) 26.222)) 127.0)
                           (dtoi64 (* SRd (cim_note_duration note)))
                           0 null))
          void))))

(bind-poly note_playback note_playback_a)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; MIDI MESSAGE BUFFER
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; absolute_time seconds idx type chan a b
(bind-type MidiMSG <i64,double,i64,i8,i32,i32,i32>)
(bind-val MidiMSGBuffer |1000000,MidiMSG|)
(bind-val MidiMSGBufferIdx i64 0)
(bind-val MidiMSGBufferStartTime i64 0)

(bind-func last_midi_msg
  (lambda ()
    (if (= 0 MidiMSGBufferIdx) null
        (aref-ptr MidiMSGBuffer (- MidiMSGBufferIdx 1)))))

(bind-func midi_msg_buffer_reset
  (lambda ()
    (set! MidiMSGBufferIdx 0)))

(bind-func midi_msg_onset
  (lambda (msg:MidiMSG*)
    (if (null? msg) -1.0
        (tref msg 1))))

(bind-func midi_msg_sampletime
  (lambda (msg:MidiMSG*)
    (if (null? msg) -1
        (tref msg 0))))

(bind-func midi_msg_sample
  (lambda (msg:MidiMSG*)
    (if (null? msg) -1
        (tref msg 0))))

(bind-func midi_msg_idx
  (lambda (msg:MidiMSG*)
    (tref msg 2)))

(bind-func midi_msg_type
  (lambda (msg:MidiMSG*)
    (tref msg 3)))

(bind-func midi_msg_channel
  (lambda (msg:MidiMSG*)
    (tref msg 4)))

(bind-func midi_msg_pitch
  (lambda (msg:MidiMSG*)
    (tref msg 5)))

(bind-func midi_msg_a
  (lambda (msg:MidiMSG*)
    (tref msg 5)))

(bind-func midi_msg_volume
  (lambda (msg:MidiMSG*)
    (tref msg 6)))

(bind-func midi_msg_b
  (lambda (msg:MidiMSG*)
    (tref msg 6)))

(bind-func MidiMSG_print:[void,MidiMSG*]*
  (lambda (x)
    (if (null? x)
        (printf "<MIDI: NULL>")
        (printf "<MIDI: idx(%d),time(%f),type(%d),a(%d),b(%d)>" (midi_msg_idx x) (midi_msg_onset x) (midi_msg_type x) (midi_msg_a x) (midi_msg_b x)))
    void))

(bind-poly print MidiMSG_print)

(bind-func record_midi_msg
  (lambda (time type chan a b)
    (if (= MidiMSGBufferIdx 0) (set! MidiMSGBufferStartTime time))
    (let ((msg:MidiMSG* (aref-ptr MidiMSGBuffer MidiMSGBufferIdx)))
      (tfill! msg time (/ (i64tod (- time MidiMSGBufferStartTime)) SRd) MidiMSGBufferIdx type chan a b)
      ;; (aset! MidiMSGBuffer MidiMSGBufferIdx msg)
      (set! MidiMSGBufferIdx (+ MidiMSGBufferIdx 1))
      (- MidiMSGBufferIdx 1))))

(bind-func retrieve_midi_msg_a
  (lambda (idx)
    (if (>= idx MidiMSGBufferIdx)
        null
        (aref-ptr MidiMSGBuffer idx))))

(bind-poly retrieve_midi_msg retrieve_midi_msg_a)

(bind-func dump_midi_buffer
  (lambda ()
    (let ((idx 0)
          (msg (retrieve_midi_msg idx)))
      (while (and (not (null? msg))
                  (< idx MidiMSGBufferIdx))
        (println msg)
        (set! idx (+ 1 idx))
        (set! msg (retrieve_midi_msg idx))))))

(bind-func midi_buffer_size
  (lambda ()
    MidiMSGBufferIdx))

(bind-func find_midi_msg_a
  (lambda (timea timeb)
    (let ((idx 0)
          (msg (retrieve_midi_msg idx)))
      (while (and (not (null? msg))
                  (or (< (midi_msg_onset msg) timea)
                      (> (midi_msg_onset msg) timeb)))
        (set! idx (+ idx 1))
        (set! msg (retrieve_midi_msg idx)))
      msg)))

(bind-poly find_midi_msg find_midi_msg_a)

(bind-func find_midi_msg_off
  (lambda (msgin:MidiMSG*)
    (let ((idx (+ (midi_msg_idx msgin) 1))
          (pitchin (midi_msg_pitch msgin))
          (msg (retrieve_midi_msg idx)))
      (while (or (not (null? msg))
                 (= MIDI_CC (midi_msg_type msg))
                 (<> (midi_msg_pitch msg) pitchin))
        (set! idx (+ idx 1))
        (set! msg (retrieve_midi_msg idx)))
      (if (null? msg) msg
          (if (= (midi_msg_type msg) MIDI_NOTE_OFF) msg
              (if (= (midi_msg_volume msg) 0)
                  msg
                  null))))))

(bind-func find_midi_msg_dur
  (lambda (msgin:MidiMSG*)
    (let ((idx (+ (midi_msg_idx msgin) 1))
          (pitchin (midi_msg_pitch msgin))
          (msg (retrieve_midi_msg idx)))
      (while (or (not (null? msg))
                 (= MIDI_CC (midi_msg_type msg))
                 (<> (midi_msg_pitch msg) pitchin))
        (set! idx (+ idx 1))
        (set! msg (retrieve_midi_msg idx)))
      (if (null? msg) 0.0
          (- (midi_msg_onset msg) (midi_msg_onset msgin))))))


(bind-func midi_send_dat
  (lambda (device:i8* a:i8 b:i8 c:i8 d:i8)
    (midi_send (cast device) a b c d)))


;; where timea and timeb are limits for startime not endtime
(bind-func midi_playback_a
  (lambda (time device:i8* timea timeb control_only:i1)
    (let ((startmsg (find_midi_msg timea (+ timea 0.1)))
          (endmsg (find_midi_msg timeb (+ timeb 0.1))))
      (println startmsg "--" endmsg)
      (if (or (null? startmsg)
              (null? endmsg))
          void
          (let ((startidx (midi_msg_idx startmsg))
                (starttime (* -1 (dtoi64 (* SRd(midi_msg_onset startmsg)))))
                (endidx (midi_msg_idx endmsg))
                (num (- endidx startidx))
                (msg null)
                (pitch 0)
                (duration 0)
                (i 0))
            (dotimes (i num)              
              (set! msg (retrieve_midi_msg (+ i startidx)))
              (if (or (not control_only)
                      (= (midi_msg_type msg) MIDI_CC))
                  (callback (+ (dtoi64 (* SRd (midi_msg_onset msg))) time starttime) midi_send_dat
                            device
                            (midi_msg_type msg)
                            (i32toi8 (midi_msg_channel msg))
                            (i32toi8 (midi_msg_a msg))
                            (i32toi8(midi_msg_b msg)))))
            void)))))

(bind-func midi_playback_b
  (lambda (time device timea control_only)
    (midi_playback_a time device timea
                     (midi_msg_onset (last_midi_msg))
                     control_only)))

(bind-func midi_playback_c
  (lambda (time device control_only)
    (midi_playback_a time device
                     (midi_msg_onset (retrieve_midi_msg 0))
                     (midi_msg_onset (last_midi_msg))
                     control_only)))

(bind-func midi_playback_d
  (lambda (time device)
    (midi_playback_a time device
                     (midi_msg_onset (retrieve_midi_msg 0))
                     (midi_msg_onset (last_midi_msg))
                     #f)))

(bind-poly midi_playback midi_playback_a)
(bind-poly midi_playback midi_playback_b)
(bind-poly midi_playback midi_playback_c)
(bind-poly midi_playback midi_playback_d)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; analysis

(bind-val rhythmbins |24,i64|)

(bind-func release_bpm_bins
  (lambda ()
    (doloop (i 24)
      (aset! rhythmbins i 0))))

(bind-func print_rhythm_bins
  (lambda ()
    (doloop (i 24)
      (printout (aref rhythmbins i) ","))
    (println)))

(bind-func decrement_bins
  (lambda ()
    (doloop (i 24)
      (if (> (aref rhythmbins i) 0)
          (aset! rhythmbins i (- (aref rhythmbins i) 1))))
    void))
    
(bind-func current_bpm
  (let ((firstm 0) (secondm 0) (i 0) (idx 0))
    (lambda ()
      (set! firstm 0) (set! secondm 0) (set! idx 0)
      (dotimes (i 24)
        (if (> (aref rhythmbins i) secondm)
            (set! secondm (aref rhythmbins i)))
        (if (> (aref rhythmbins i) firstm)
            (begin
              (set! secondm firstm)              
              (set! firstm (aref rhythmbins i))
              (set! idx i))))
      (if (> firstm 7)
          (begin
            (dotimes (i 24)
              (aset! rhythmbins i 0))
            (aset! rhythmbins idx 3)))
      (+ 72 (* idx 4)))))

(bind-func bpm_analysis
  (let ((previous_onset 0.0)
        (this_onset 0.0)
        (modr (i64tod 4))
        (modv 0.0)
        (idx 0)
        (bin 0.0))
    (lambda (note:CIMNote*)
      (set! this_onset (cim_note_onset note))
      (if (and (> (- this_onset previous_onset) .1)
               (< (- this_onset previous_onset) 2.0))
          (begin
            (set! bin (* (/ 1.0 (- this_onset previous_onset)) 60.0))
            (while (or (< bin 72.0)
                       (>= bin 144.0))
              (if (< bin 72.0) (set! bin (* 2.0 bin)))
              (if (>= bin 144.0) (set! bin (* 0.5 bin))))
            (set! modv (% bin modr))            
            (if (< modv (* .5 modr))
                (set! bin (- bin modv))
                (set! bin (+ bin (- modr modv))))
            (set! idx (/ (- (dtoi64 bin) 72) (dtoi64 modr)))
            (aset! rhythmbins idx (+ 1 (aref rhythmbins idx)))
            (set! previous_onset this_onset)
            void)
          (begin
            (set! previous_onset this_onset)
            void)))))

;; root (as pc) and major/minor #t/#f 
(bind-type CIMKey <i64,i1>)
;; maj 2 2 1 2 2 2 1
;; min 2 1 2 2 1 2 2
;;     2 1 2 2 2 1 2
;;     2 1 2 2 1 2 1

(bind-func weighted_pcs
  (let ((i 0) (j 0)
        (tmppcs:|12,i64|* (alloc))
        (tmpweight:|12,i64|* (alloc)))
    (lambda (pcs:|12,i64|* weighted:|12,i64|*)
      (dotimes (i 12)
        (aset! tmppcs i (aref pcs i)))
      (sort (cast tmppcs i64*) 12)
      (dotimes (i 12)
        (aset! tmpweight i (aref tmppcs (- 11 i))))
      (dotimes (i 12)
        (aset! tmppcs i (aref pcs i)))
      (dotimes (i 12)
        (dotimes (j 12)
          (if (= (aref tmppcs j) (aref tmpweight i))
              (begin
                (aset! weighted i j)
                (aset! tmpweight i -2)
                (aset! tmppcs j -1)))))
      void)))

(bind-func ivls_from_pcs
  (let ((prev -1)
        (i 0) (j 0)
        (total 0)
        (cnt 0))
    (lambda (pcs:|12,i1|* ivls:|12,i64|*)
      (dotimes (i 12)
        (set! cnt 0) (set! total 0) (set! prev -1)
        (aset! ivls i 0)
        (if (aref pcs i)
            (begin
              (set! total (+ total 1))
              (if (> prev -1)
                  (begin (aset! ivls cnt (- i prev))
                         (set! cnt (+ cnt 1))))
              (set! prev i))))
      void)))

;; where guesses are weight ordered pitch classes
(bind-func best_root_match_against_pcs
  (lambda (pcs:|12,i1|* guesses:|12,i64|*)
    (let ((i 0) (pc -1) (lgst 0) (idx 0)
          (results:|4,i64|* (alloc)))
      ;; test best 3 choices
      (dotimes (i 4)
        (aset! results i 0)
        (set! pc (aref guesses i))
        (if (aref pcs (% (+ pc 7) 12)) ;; match 5th
            (aset! results i (+ 3 (aref results i))))
        (if (and (aref pcs (% (+ pc 3) 12)) ;; match minor 3rd
                 (not (aref pcs (% (+ pc 4) 12))))
            (aset! results i (+ 2 (aref results i))))
        (if (and (aref pcs (% (+ pc 4) 12)) ;; match major 3rd
                 (not (aref pcs (% (+ pc 3) 12))))
            (aset! results i (+ 2 (aref results i))))
        (if (and (aref pcs (% (+ pc 4) 12)) ;; match major 3rd + NOT min 7th
                 (not (aref pcs (% (+ pc 10) 12))))
            (aset! results i (+ 1 (aref results i))))
        (if (and (aref pcs (% (+ pc 8) 12)) ;; match minor 6th
                 (not (aref pcs (% (+ pc 9) 12))))
            (aset! results i (+ 1 (aref results i))))
        (if (and (aref pcs (% (+ pc 9) 12)) ;; match major 6th
                 (not (aref pcs (% (+ pc 8) 12))))
            (aset! results i (+ 1 (aref results i))))
        (if (aref pcs (% (+ pc 5) 12))  ;; match 4th
            (aset! results i (+ 1 (aref results i))))
        (if (aref pcs (% (+ pc 2) 12)) ;; match 2nd
            (aset! results i (+ 1 (aref results i)))))
      (dotimes (i 4)
        ;; (printout "match " i ">"  (aref guesses i) " " (aref results i) "\n")
        (if (> (aref results i) lgst)
            (begin
              (set! idx i)
              (set! lgst (aref results i)))))
      (aref guesses idx))))

;; true for maj
;; false for min
(bind-func best_majmin_guess
  (lambda (pcs:|12,i1|* root:i64)
    (cond ((and (aref pcs (% (+ root 3) 12))
                (not (aref pcs (% (+ root 4) 12))))
           #f) ;; if minor 3rd and NO maj 3rd -> minor
          ((and (aref pcs (% (+ root 4) 12))
                (not (aref pcs (% (+ root 3) 12))))
           #t) ;; if major 3rd and NO min 3rd -> major
          ((and (or (aref pcs (% (+ root 8) 12))
                    (aref pcs (% (+ root 10) 12)))
                (aref pcs (% (+ root 3) 12)))
           #f) ;; if minor 3rd and flat 6 or flat 7 -> minor 
          ((and (aref pcs (% (+ root 9) 12))
                (aref pcs (% (+ root 4) 12)))
           #t) ;; if major 3rd and major 6th -> major
          (else #t)))) ;; if in doubt go major

(bind-func total_key_errors
  (lambda (pcs:|12,i1|* root majmin:i1)
    (let ((res 0))
      (if majmin
          (begin ;; major
            (if (aref pcs (% (+ root 1) 12))
                (set! res (+ res 1)))
            (if (aref pcs (% (+ root 3) 12))
                (set! res (+ res 1)))
            (if (aref pcs (% (+ root 6) 12))
                (set! res (+ res 1)))
            (if (aref pcs (% (+ root 8) 12))
                (set! res (+ res 1)))
            (if (aref pcs (% (+ root 10) 12)) ;; flat 7 - maybe not??
                (set! res (+ res 1))))
          (begin ;; minor
            (if (aref pcs (% (+ root 1) 12))
                (set! res (+ res 1)))
            (if (aref pcs (% (+ root 4) 12))
                (set! res (+ res 1)))
            (if (aref pcs (% (+ root 6) 12))
                (set! res (+ res 1)))
            (if (aref pcs (% (+ root 9) 12))
                (set! res (+ res 1)))))
      (if (and (aref pcs (% (+ root 3) 12))
               (aref pcs (% (+ root 4) 12)))
          (+ res 2)
          res))))

;; where num is the num to set
;; where bit is the bit index to set
;; and where val is either 0 or 1
(bind-func bitset
  (lambda (num:i16 bit:i16 val:i16)
    (^ (& (^ -1:i16 num) (<< 1:i16 bit)) num)))

(bind-func key_analysis
  (let ((ivls:|12,i64|* (alloc))
        (pitchset:|12,i1|* (alloc))
        (pitchset_hist:|12,i64|* (alloc))        
        (weighted_set:|12,i64|* (alloc))
        (chord:|12,i1|* (alloc))
        (chords:|4096,i64|* (alloc))
        (previous_onset:double 0.0)
        (root 0)
        (majmin #t)
        (idx:i16 0) (i 0)
        (pc 0))
    (lambda (note:CIMNote*)
      (set! idx 0)
      ;; first record pitchset stuff
      (set! pc (% (cim_note_pitch note) 12))
      (aset! pitchset_hist pc (+ (aref pitchset_hist pc) 1))
      (aset! pitchset pc #t)
      (weighted_pcs pitchset_hist weighted_set)
      (ivls_from_pcs pitchset ivls)
      ;; next record chord stuff
      (if (< (- (cim_note_onset note) previous_onset) 0.05)
          (begin (aset! chord pc #t) void)
          (begin ;; else marks the end of the last chord
            (dotimes (i 12)
              (if (aref chord i)
                  (set! idx (bitset idx i 1))))
            (aset! chords idx (+ (aref chords idx) 1))
            void))
      (set! previous_onset (cim_note_onset note))
      ;; try a simple root+majmin guess
      (set! root (best_root_match_against_pcs pitchset weighted_set))
      (set! majmin (best_majmin_guess pitchset root))
      ;; printout
      ;; (printout "pitchset:")
      ;; (dotimes (i 12)
      ;;   (printout (aref pitchset i) ","))
      ;; (println)
      ;; (printout "pitchsethist:")
      ;; (dotimes (i 12)
      ;;   (printout (aref pitchset_hist i) ","))
      ;; (println)
      ;; (printout "weigthed:")
      ;; (dotimes (i 12)
      ;;   (printout (aref weighted_set i) ","))
      ;; (println)
      ;; printout
      (println "root:" root "maj?:" majmin "errors:" (total_key_errors pitchset root majmin))
      (if (> (total_key_errors pitchset root majmin) 1)
          (begin
            (println "reset")
            (dotimes (i 12)
              (aset! pitchset i #f)
              (aset! pitchset_hist i 0))))
      void)))

(bind-func print_key_bins
  (lambda ()
    (let ((pcs:|12,i64|* (key_analysis.pitchset_hist))
          (i 0))
      (dotimes (i 12)
        (printout (aref pcs i) ","))
      (println "")
      void)))

;; negative numbers for minor
;; positive numbers for major
;; -12 for C minor
(bind-func current_key
  (lambda ()
    (let ((root:i64 (key_analysis.root))
          (majmin:i1 (key_analysis.majmin))
          (pcs:|12,i1|* (key_analysis.pitchset))
          (i 0))
      ;; (printout "pset:")
      ;; (dotimes (i 12)
      ;;   (printout (aref pcs i) ","))
      ;; (println)
      (if majmin
          root
          (if (= root 0) -12
              (* -1 root))))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Analysis
;;
(bind-func note_analysis
  (lambda (note:CIMNote*)
    (if (null? note) void
        (begin
          ;;(println ">>" note)          
          (bpm_analysis note)
          (key_analysis note)
          void))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; write a midi receiver which writes to MSG Buffer and Note Buffer
;;
(bind-func midi_msg_buffer_receiver
  (let ((type:i8 0) (chan:i8 0) (a:i8 0) (b:i8 0) (idx -1))
    (lambda (time:double len:i64 msg:i8*)
      (set! type (>> (pref msg 0) 4))
      (set! chan (& (pref msg 0) 15))
      (set! a (pref msg 1))
      (set! b (pref msg 2))
      (if (or (= type MIDI_NOTE_ON) (= type MIDI_NOTE_OFF) (= type MIDI_CC))
          (begin
;            (println "midi-in" type chan a b)            
            (record_midi_msg (now) type (convert chan) (convert a) (convert b))
            (set! idx (record_note (now) type (convert chan) (convert a) (convert b)))
            (note_analysis (retrieve_note idx))
            void)
          void))))

;; utilities
(define panic
  (lambda (device)
  	(dotimes (c 16)
  		(dotimes (i 127)
    		(midi_send device 8 c i 0)))))
